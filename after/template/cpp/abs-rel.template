VimL:" Absolute and relative Classes Template, Luc Hermitte
VimL:" Used to define Date and Duration, Point and Distance, ...
VimL:" hint: Absolute/Relative classes (e.g. point/distance, date/duration, ...)
VimL: let s:value_start = '¡'
VimL: let s:value_end   = '¡'
VimL: let s:reindent = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:absclsname = inputdialog('Name of the "absolute" class ?')
VimL: let s:relclsname = inputdialog('Name of the "relative" class ?')
VimL: let s:sharedclsname = inputdialog('Name of the "shared" class ? (empty=none)', s:absclsname . lh#naming#param("Impl"))
VimL: let s:issharingimpl = ! empty(s:sharedclsname)
VimL: let s:defaultisenough = lh#ui#confirm( "Are the implicitly generated default constructor, copy-constructor, destructor, and assignement operatror enough?", "&Yes\n&No", 1) == 1
VimL: let s:istemplate = lh#ui#confirm("Are the classes template ?", "&Yes\n&No", 2) == 1
VimL: let s:tmpl_type = lh#marker#txt("T")
VimL: let s:tmpl_decl = lh#ui#if(s:istemplate, "template <".lh#marker#txt("typename")." ".s:tmpl_type."> ", "")
VimL: let s:tmpl = lh#ui#if(s:istemplate, "<".s:tmpl_type.">", "")
VimL: let s:tmpl2_type = lh#marker#txt("U")
VimL: let s:tmpl2_decl = lh#ui#if(s:istemplate, "template <".lh#marker#txt("typename")." ".s:tmpl2_type.">\n", "")
VimL: let s:tmpl2 = lh#ui#if(s:istemplate, "<".s:tmpl2_type.">", "")
VimL: let s:typename = lh#ui#if(s:istemplate, "typename ", "")
VimL: let s:lhs = lh#naming#param("lhs")
VimL: let s:rhs = lh#naming#param("rhs")
VimL: let s:coeff = lh#naming#param("coeff")
VimL:"
VimL:"
<+s:tmpl_decl+>class <+s:absclsname+>;
<+s:tmpl_decl+>class <+s:relclsname+>;
VimL: if s:issharingimpl | call s:Include('abs-rel-shared', 'cpp/internals') | endif
/**
 * <+lh#dox#brief('')+>
 *
 * <+doc+>
 *
 * <+@invariants+>
 *
 * <p><b>Semantics</b><br>
 * <li> Value, mathematical: it's an absolute position
 * <li> <+absolute position+>
 * <+ <li> sem+>
 *
 * @version ¡'$'¡revision$
 * <+lh#dox#author()+>
 */
VimL: let s:super = "DETAILS::".s:sharedclsname.s:tmpl
VimL: let s:inh = lh#ui#if(s:issharingimpl, "\n: ".s:super."(".lh#marker#txt("params").")", "\n".lh#marker#txt(" "))
<+s:tmpl_decl+>class ¡s:absclsname.lh#ui#if(s:issharingimpl, " : protected ".s:super, "")¡
{
public:
    friend class <+s:relclsname+><+s:tmpl+>;
    typedef ¡lh#ui#if(s:issharingimpl, s:typename.s:super."::scalar_type", "<+scalar_type+>")¡ scalar_type;

    /**@name Construction/destruction
     */
    //@{
    /** Initialisation constructor.
     */
    <+s:absclsname+>(<+parameters+>)¡lh#ui#if(s:istemplate, s:inh."{<++>}", ";")¡
    ¡lh#cpp#abs_rel#canonicalortodoxform(s:absclsname, ! s:defaultisenough)¡
    //@}

    /**@name Operators
     */
    //@{
    <+s:absclsname+> & operator+=(¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)¡lh#ui#if(s:issharingimpl, " { this->add(".(s:rhs)."); return *this; }", lh#ui#if(s:istemplate, "<++>", ";"))¡
    <+s:absclsname+> & operator-=(¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)¡lh#ui#if(s:issharingimpl, " { this->dec(".(s:rhs)."); return *this; }", lh#ui#if(s:istemplate, "<++>", ";"))¡

    static <+s:super+> const diff(<+s:absclsname+> const& <+s:lhs+>, <+s:absclsname+> const& <+s:rhs+>)
    {
        <+s:super+> tmp(<+s:lhs+>);
        tmp.dec(<+s:rhs+>);
        return tmp;
    }
    friend bool operator==(<+s:absclsname+> const& <+s:rhs+>, <+s:absclsname+> const& <+s:lhs+>)¡lh#ui#if(s:issharingimpl, "\n{ return ".s:absclsname."::isEqual(".(s:rhs).", ".(s:lhs)."); }", ';')¡
    //@}
};

/**
 * <+lh#dox#brief('')+>
 *
 * <+doc+>
 *
 * <+@invariants+>
 *
 * <p><b>Semantics</b><br>
 * <li> Value, mathematical: it's relative position
 * <li> <+relative position+>
 * <+ <li> sem+>
 *
 * @version ¡'$'¡revision$
 * <+lh#dox#author()+>
 */
<+s:tmpl_decl+>class ¡s:relclsname.lh#ui#if(s:issharingimpl, " : protected ".s:super, "")¡
{
public:
    friend class <+s:absclsname+><+s:tmpl+>;
    typedef ¡lh#ui#if(s:issharingimpl, s:typename.s:super."::scalar_type", "<+scalar_type+>")¡ scalar_type;

    /**@name Construction/destruction
     */
    //@{
    /** Initialisation constructor.
     */
    <+s:relclsname+>(<+parameters+>)¡lh#ui#if(s:istemplate, s:inh."{<++>}", ";")¡
    ¡lh#cpp#abs_rel#canonicalortodoxform(s:relclsname, ! s:defaultisenough)¡
    //@}

    /**@name Operators
     */
    //@{
    <+s:relclsname+> & operator+=(<+s:relclsname+> const& <+s:rhs+>)¡lh#ui#if(s:issharingimpl, " { this->add(".(s:rhs)."); return *this; }", ";")¡
    <+s:relclsname+> & operator-=(<+s:relclsname+> const& <+s:rhs+>)¡lh#ui#if(s:issharingimpl, " { this->dec(".(s:rhs)."); return *this; }", ";")¡
    <+s:relclsname+> & operator*=(scalar_type <+s:coeff+>)¡lh#ui#if(s:issharingimpl, "{ this->mult(".(s:coeff)."); return *this; }", ";")¡
    <+s:relclsname+> & operator/=(scalar_type <+s:coeff+>)¡lh#ui#if(s:issharingimpl, "{ this->div(".(s:coeff)."); return *this; }", ";")¡

    friend bool operator==(<+s:relclsname+> const& <+s:rhs+>, <+s:relclsname+> const& <+s:lhs+>)¡lh#ui#if(s:issharingimpl, "\n{ return ".s:relclsname."::isEqual(".(s:rhs).", ".(s:lhs)."); }", ";")¡

    <+s:tmpl2_decl+>friend ¡s:relclsname.s:tmpl2¡ const operator-(¡s:absclsname.s:tmpl2¡ const& <+s:lhs+>, ¡s:absclsname.s:tmpl2¡ const& <+s:rhs+>);
    //@}

    protected:
    explicit <+s:relclsname+>(<+s:super+> const& <+s:rhs+>) : <+s:super+>(<+s:rhs+>) {}
};

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator-(
        ¡s:absclsname.s:tmpl¡ const& <+s:lhs+>,
        ¡s:absclsname.s:tmpl¡ const& <+s:rhs+>)
{ return ¡s:relclsname.s:tmpl¡(¡s:absclsname.s:tmpl¡::diff(<+s:lhs+>, <+s:rhs+>)); }

<+s:tmpl_decl+>inline
¡s:absclsname.s:tmpl¡ operator+(
        ¡s:absclsname.s:tmpl¡        <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)
{ return <+s:lhs+> += <+s:rhs+>; }

<+s:tmpl_decl+>inline
¡s:absclsname.s:tmpl¡ operator+(
        ¡s:relclsname.s:tmpl¡ const& <+s:lhs+>,
        ¡s:absclsname.s:tmpl¡        <+s:rhs+>)
{ return <+s:rhs+> += <+s:lhs+>; }

<+s:tmpl_decl+>inline
¡s:absclsname.s:tmpl¡ operator-(
        ¡s:absclsname.s:tmpl¡        <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)
{ return <+s:lhs+> -= <+s:rhs+>; }

#if 0
// Makes no sense
<+s:tmpl_decl+>inline
¡s:absclsname.s:tmpl¡ const operator-(
        ¡s:relclsname.s:tmpl¡ const& <+s:lhs+>,
        ¡s:absclsname.s:tmpl¡ const& <+s:rhs+>);
#endif

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator+(
        ¡s:relclsname.s:tmpl¡        <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)
{ return <+s:lhs+> += <+s:rhs+>; }

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator-(
        ¡s:relclsname.s:tmpl¡        <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡ const& <+s:rhs+>)
{ return <+s:lhs+> -= <+s:rhs+>; }

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator*(
        ¡s:relclsname.s:tmpl¡              <+s:lhs+>,
        ¡s:typename.s:relclsname.s:tmpl¡::scalar_type <+s:rhs+>)
{ return <+s:lhs+> *= <+s:rhs+>; }

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator*(
        ¡s:typename.s:relclsname.s:tmpl¡::scalar_type <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡              <+s:rhs+>)
{ return <+s:rhs+> *= <+s:lhs+>; }

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator/(
        ¡s:relclsname.s:tmpl¡              <+s:lhs+>,
        ¡s:typename.s:relclsname.s:tmpl¡::scalar_type <+s:rhs+>)
{ return <+s:lhs+> /= <+s:rhs+>; }

<+s:tmpl_decl+>inline
¡s:relclsname.s:tmpl¡ operator/(
        ¡s:typename.s:relclsname.s:tmpl¡::scalar_type <+s:lhs+>,
        ¡s:relclsname.s:tmpl¡              <+s:rhs+>)
{ return <+s:rhs+> /= <+s:lhs+>; }

