VimL:" C++ formatted-comment template-routine, Luc Hermitte, 23rd Mar 2012
VimL:" Meant to be used as a function whose parameter is a list of things to print.
VimL:" Default output format=doxygen; override this template for  other formats.
VimL:" hint: /** stuff from the list... */
VimL: let s:reindent     = 1
VimL: function! s:_LoopOverDoxItems(doc)
VimL:    " echomsg "-->".string(a:doc)
VimL:    let lead = lh#dox#comment_leading_char(). " "
VimL:    let lines = []
VimL:    for item in a:doc
VimL:        let text = get(item, 'text', '')
VimL:        if has_key(item,"tag")
VimL:           " try to use the lh#dox#{tag}() function if it exists
VimL:           if (item.tag) == "param"
VimL:               let line = lh#dox#{item.tag}(item)
VimL:           elseif exists("*lh#dox#".(item.tag))
VimL:               let line = lh#dox#{item.tag}(text)
VimL:           else
VimL:               let line = lh#dox#tag(item.tag) . " " . text
VimL:           endif
VimL:        elseif has_key(item, "license")
VimL:            let license = s:GetTemplateLines(item.license, "license/text")
VimL:            let pat_not_text = '\c\(^'.s:Command('').'\|'.s:Special('').'\)'
VimL:            call map(license, "v:val =~ pat_not_text ? (v:val) : lead.v:val")
VimL:            let lines += license
VimL:            continue
VimL:        else
VimL:            let line = text
VimL:        endif
VimL:        " optional entries are completly surrounded by a placeholder
VimL:        if has_key(item,"optional") && item.optional && match(line, lh#marker#txt(".\\{-}"))==-1
VimL:            let line = lh#marker#txt(line)
VimL:        endif
VimL:        " special case: @ingroup is put on the /** line
VimL:        if has_key(item,"tag") && item.tag == "ingroup"
VimL:            let s:content.lines[s:content.crt-1] .= line
VimL:        elseif (line!~'^\s*$') " empty lines produce nothing
VimL:            " Use "\n" as {text} to force an empty line
VimL:            let lines += [line=="\n" ? lead : lead.line]
VimL:        endif
VimL:    endfor
VimL:    "trim trailing whitespaces
VimL:    call map(lines, "substitute(v:val, ' *$', '', '')")
VimL:    call s:Inject(lines)
VimL: endfunction
MuT: if lh#ft#option#get("template_expand_doc", &ft, 1)
MuT:   let s:restore_options = lh#on#exit().restore(s:content, 'can_apply_style')
VimL:  let s:content.can_apply_style = s:Param('style', 0)
/**
VimL:  call s:_LoopOverDoxItems(empty(s:Args()) ? [] : s:Args()[0])
 */
VimL: " let g:lines = deepcopy(s:content.lines)
VimL:  call s:restore_options.finalize()
MuT: endif
