VimL:" attribute File Template, Luc Hermitte <hermitte {at} free {dot} fr>, 02nd Dec 2015
VimL:" hint: Type m_attribute;
VimL: " Parameter: "attribute" (optional)
VimL: "  - "name": string, mandatory
VimL: "  - "type": string, mandatory,
VimL: "  - "type_info": dict, mandatory (comes from lh#cpp#types#get_info())
VimL: "  - "storage": string, optional: "constepxr ", "static ", "thread_local ", ...
VimL: "  - "default": string, optional, C++11+ only: " = value"
VimL: "  - "align": number, optional
VimL: "  - "include": string/list: files to #include
VimL: " @pre "type" is expected to have been processed w/ lh#cpp#type#*()
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:reindent     = 1
VimL: " TODO: Handle Doxygen/comments as well
MuT:  let s:attribute    = s:Param("attribute", {'type': lh#marker#txt(lh#naming#type('type')), 'name': lh#marker#txt('name')})
VimL: call s:Include('includes', 'cpp/internals', s:attribute)
MuT:  let s:align = repeat(' ', max([0, get(s:attribute, 'align', 0) - lh#encoding#strlen(s:attribute.type)]))
MuT:  if !lh#cpp#use_cpp11()
MuT:    let s:default_attrb_value = ""
MuT:  else
MuT:    let s:default_attrb_value = get(s:attribute, "default", "")
VimL:   let s:default_attrb_value = empty(s:default_attrb_value) ? "" : " = ".s:default_attrb_value
MuT:  endif
MuT:  if lh#option#is_set(s:attribute.type_info)
VimL:    call s:AddPostExpandCallback('lh#dev#import#add_any('.string(get(s:attribute.type_info, "includes", [])).')')
MuT:  endif
<+get(s:attribute, 'storage', '')+><+s:attribute.type+> <+s:align+><+lh#naming#member(s:attribute.name)+><+s:default_attrb_value+>;
VimL: " <+get(s:attribute, 'storage', '')+><+s:Include(s:attribute.type, 'cpp')+> <+s:align+><+lh#naming#member(s:attribute.name)+><+s:default_attrb_value+>;
