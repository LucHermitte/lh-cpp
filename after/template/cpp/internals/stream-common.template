VimL:" «stream-common» File Template, Luc Hermitte
VimL: let s:reindent     = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
MuT:  let s:type = 'std::'.s:direction.'stream'
MuT:  let s:op = s:direction=='o' ? '<<' : '>>'
MuT:  let s:clsname0 = lh#cpp#AnalysisLib_Class#SearchClassDefinition(line('.'))
MuT:  let s:friend = ! empty(s:clsname0) ? 'friend ' : ' '
MuT:  let s:clsname  = lh#ui#input("Template\noperator".s:op." for the class:", s:clsname0)
MuT:  let s:param_type = s:direction=='o' ? lh#dev#cpp#types#add_const(s:clsname) : s:clsname
VimL: call s:Include('stream-signature', 'cpp/internals')
VimL: call s:Include('stream-implementation', 'cpp/internals')
<+s:TerminalPlaceHolder()+>
VimL: " Todo: check for context-namespaces and trim them from s:clsname
VimL: " Todo: check for the previous class if s:clsname0 isempty
VimL: " Todo: options for inline or not ; -> g:implPlace, ...
VimL: " Todo: ask for simple or complex (Langer/Roguewave) inserter
