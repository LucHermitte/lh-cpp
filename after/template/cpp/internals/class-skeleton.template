VimL:" class-skeleton File Template, Luc Hermitte <hermitte {at} free {dot} fr>, 25th Nov 2015
VimL:" hint: Routine Skeleton for C++ classes
VimL:" TODO: find a way to order members
VimL:" TODO: find a way to group members
VimL:" TODO: option to disable comments in defaulted functions
VimL:" TODO: C++11 move copy & move assign
VimL:" TODO: Enforce rule of "all or nothing"
VimL:" TODO: Find a way to specify attributes to use in init-ctr and w/ getters/setters when surrounding.
VimL: let s:value_start  = "ยก"
VimL: let s:value_end    = s:value_start
VimL: let s:marker_open  = "<+"
VimL: let s:marker_close = "+>"
VimL: let s:reindent     = 1
MuT:  " let s:clsname    = s:Param('clsname', lh#marker#txt(lh#naming#type(expand('%:t:r'))))
VimL: call s:Include('get-class-name', 'cpp/internals')
MuT:  let s:functions  = s:Param('functions', lh#cpp#snippets#new_function_list())
VimL: " =====[ Attributes
VimL: " Fetch attributes from the parameters passed to the class skeleton
MuT:  let s:attributes = s:Param('attributes', [])
VimL: " And also use the surrounded attributes
VimL: let s:attributes += lh#cpp#snippets#_decode_selected_attributes(s:SurroundRaw(1, ''))
VimL: call s:Verbose('attributes: %1', s:attributes)
VimL: " Finally fill the related function with these information
MuT:  let s:attrb_functions = []
MuT:  if !empty(s:attributes)
VimL:   for attr in s:attributes | for fct in get(attr, 'functions', []) | let s:attrb_functions += [{'kind': fct, 'attribute': attr}] | endfor | endfor
VimL:   for attr in s:attributes | let attr.type_info = lh#cpp#types#get_info(attr.type, {'type': attr.type}) | let attr.type = attr.type_info.typename_for_header() |endfor
VimL:   " Set attributes as parameters to init-ctr, unless already set
MuT:    let s:init_constructor = s:functions.get1({'kind' : 'init-constructor'})
VimL:   call s:init_constructor.add_new({'parameters': lh#list#map_on(deepcopy(s:attributes), 'type', 'lh#dev#cpp#types#const_correct_type(v:val)'), 'visibility': 'public'})
VimL:   " Remove default-constructor unless already set visible
MuT:    let s:default_constructor = s:Param('default-constructor', {})
VimL:   call lh#dict#add_new(s:default_constructor, {'visibility': 'none'})
MuT:  endif
VimL: " =====[ Class characteristics
MuT:  let s:is_final = s:Param('final', 0)
MuT:  let s:final_str = s:is_final ? (lh#cpp#use_cpp11() ? ' final' : lh#marker#txt(' final')) : ''
VimL: " =====[ Parents
MuT:  let s:parents = s:Param('parents', [])
MuT:  let s:noncopyable = s:Param('noncopyable', -1) " -1 == maybe
MuT:  let s:copyable    = s:Param('copyable', -1)    " -1 == maybe
MuT:  if s:copyable == 1
VimL:   let s:noncopyable = 0 " clean 'may be'
MuT:  endif
MuT:  if s:noncopyable == 1
VimL:   let s:copyable = 0 " clean 'may be'
MuT:    let s:noncopyable_class = lh#option#get('cpp_noncopyable_class', {'name': 'noncopyable'})
VimL:   " TODO: support auto import of noncopyable file
MuT:    if empty(s:noncopyable_class)
VimL:     call lh#dict#add_new(s:Param('copy-constructor', {}), {'how': 'deleted'})
VimL:     call lh#dict#add_new(s:Param('assignment-operator', {}), {'how': 'deleted'})
MuT:    else
VimL:     " Don't add the noncopyable if there is already a public parent
MuT:      if ! lh#cpp#snippets#_has_a_non_copyable_parent(s:parents)
VimL:       let s:parents += [ lh#cpp#snippets#_merge_include_data(s:noncopyable_class, {'visibility': 'private'})]
MuT:      endif
MuT:      if lh#cpp#snippets#shall_explicit_defaults()
VimL:       call lh#dict#add_new(s:Param('copy-constructor', {}), {'how': 'deleted'})
VimL:       call lh#dict#add_new(s:Param('assignment-operator', {}), {'how': 'deleted'})
MuT:      endif
MuT:    endif
MuT:  endif
VimL: "let g:args=deepcopy(s:args)
MuT:  let s:parents_data = lh#cpp#snippets#parents(s:parents)
VimL: call lh#list#for_each_call(s:parents_data[1], "lh#mut#_add_post_expand_callback(\"lh#dev#import#add(v:val)\")")
VimL: " =====[ Functions
VimL: " --------[ Any Functions
MuT:  "let s:functions = s:Param('functions', [])
VimL: " --------[ Attribute functions (get/set)
VimL: call s:functions.add(s:attrb_functions)
VimL: " --------[ General case
VimL: call s:functions.reverse()
MuT:  let s:pub_functions = s:functions.public()
MuT:  let s:pro_functions = s:functions.protected()
MuT:  let s:pri_functions = s:functions.private()
VimL: " --------[ Special Functions
MuT:  if lh#cpp#snippets#requires_destructor(s:attributes)
MuT:    let s:destructor = s:Param('destructor', {})
VimL:   " Force visible (even private) if not set already
Viml:   call lh#dict#add_new(s:destructor, {'visibility': 'public'})
MuT:  endif
MuT:  if (s:copyable != 0) && lh#cpp#snippets#requires_copy_operations(s:attributes)
MuT:    let s:copy_constructor = s:Param('copy-constructor', {})
VimL:   " Force visible (even protected) if not set already
Viml:   call lh#dict#add_new(s:copy_constructor, {'visibility': 'public'})
MuT:    let s:assignment_operator = s:Param('assignment-operator', {})
VimL:   " Force visible (even protected) if not set already
Viml:   call lh#dict#add_new(s:assignment_operator, {'visibility': 'public'})
MuT:  endif
VimL: call s:Include('shall_explicit_defaults', 'cpp/internals')
VimL: " In reverse order because of how Include() works
MuT:  let s:special_functions = ['destructor', 'assignment-operator', 'copy-constructor', 'default-constructor']
MuT:  let s:spe_func_data = map(copy(s:special_functions), "extend(s:Param(v:val, {}), {'kind': v:val})")
VimL: for spe in s:spe_func_data | call lh#dict#add_new(spe, s:default_explicit) | endfor
MuT:  let s:pub_special_functions = lh#cpp#snippets#_filter_functions(s:spe_func_data, 'public')
MuT:  let s:pro_special_functions = lh#cpp#snippets#_filter_functions(s:spe_func_data, 'protected')
MuT:  let s:pri_special_functions = lh#cpp#snippets#_filter_functions(s:spe_func_data, 'private')
VimL: call extend(s:pub_functions, map(copy(s:pub_special_functions), 'v:val'))
VimL: call extend(s:pro_functions, map(copy(s:pro_special_functions), 'v:val'))
VimL: call extend(s:pri_functions, map(copy(s:pri_special_functions), 'v:val'))
VimL: " =====[ Doxygen
MuT:  let s:cls_comments_default = {}
VimL: let s:cls_comments_default.brief = lh#dox#brief(s:clsname)
VimL: let s:cls_comments_default.ingroup = {}
VimL: let s:cls_comments_default.invariant = lh#marker#txt()
VimL: let s:cls_comments_default.author = lh#dox#author_value(). ', creation'
VimL: let s:cls_comments_default.since = lh#dox#since_value()
MuT:  let s:cls_comments = s:Param('comments', {})
VimL: call extend(s:cls_comments, s:cls_comments_default, 'keep')
VimL: call s:Include('function-comment', 'cpp/internals', s:cls_comments)
VimL: " =====[ The Skeleton
class <+s:clsname+><+s:final_str+><+s:parents_data[0]+>
{
public:

VimL: for fn in s:pub_functions | call s:Include("function", "cpp/internals", {"function": fn}) | endfor
MuT:  if !empty(s:pro_functions)

protected:

VimL:   for fn in s:pro_functions | call s:Include("function", "cpp/internals", {"function": fn}) | endfor
MuT:  endif
MuT:  if !empty(s:pri_functions) || !empty(s:attributes)

private:

VimL:   for fn in s:pri_functions | call s:Include("function", "cpp/internals", {"function": fn}) | endfor
MuT:    let s:longest_type = max(map(copy(s:attributes), 'strlen(v:val.type)'))
VimL:   " calling s:Include() in a loop inserts at the current line => need to reverse
VimL:   for attrb in reverse(s:attributes) | call s:Include('attribute', 'cpp/internals', {"attribute": extend(attrb, {'align':s:longest_type}, 'force')}) | endfor
MuT:  endif
};
