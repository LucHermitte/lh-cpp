VimL:" safe-Enum definition Template, Luc Hermitte
VimL: let s:value_start = 'ยก'
VimL:" hint: struct Enum { enum type { ... } ; private: type m_value; };
VimL: let s:value_end   = 'ยก'
VimL: let s:reindent = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
MuT:  let s:enum_args   = s:CmdLineParams([])
MuT:  let s:enum_name   = s:enum_args[0]
MuT:  if empty(s:enum_name)
MuT:    let s:enum_name   = inputdialog('Name of the enum class ?', lh#marker#txt(lh#naming#type(expand('%:t:r'))))
MuT:  endif
MuT:  let s:iterable    = lh#ui#confirm("Shall ".s:enum_name." be iterable ?", "&Yes\n&No", 1) == 1
MuT:  let s:values      = len(s:enum_args) <=1 ? [lh#marker#txt('values')] : s:enum_args[1:]
MuT:  let s:lhs_        = lh#naming#param("lhs")
MuT:  let s:rhs_        = lh#naming#param("rhs")
MuT:  let s:value_      = lh#naming#param("value")
MuT:  let s:m_value     = lh#naming#member("value")
MuT:  let s:tmp         = lh#naming#local("tmp")
MuT:  let s:range       = lh#naming#function("range")
MuT:  let s:RangeType   = lh#naming#type("range")
MuT:  let s:to_string   = lh#naming#function("to_string")
MuT:  let s:to_internal = lh#naming#function("to_internal")
MuT:  let s:max         = lh#naming#function("max")
MuT:  let s:type        = lh#naming#type("type")
VimL: call s:AddPostExpandCallback('lh#dev#import#add("<string>")')
MuT:  if lh#cpp#use_cpp11()
VimL:   call s:AddPostExpandCallback('lh#dev#import#add("<cstdint>")')
MuT:  else
VimL:   call s:AddPostExpandCallback('lh#dev#import#add("<stdint.h>")')
MuT:  endif
VimL: call s:AddPostExpandCallback('lh#dev#import#add("<cassert>")')
VimL: silent! unlet s:doc
MuT:  let s:doc = []
VimL: let s:doc += [{ "tag": "ingroup", "text": "g".lh#ft#option#get('dox_group', &ft, lh#marker#txt('Group')) }]
VimL: let s:doc += [{ "tag": "brief", "text": (s:enum_name)." Safe Enum" }]
VimL: let s:doc += [{ "text": "\n" }]
VimL: let s:doc += [{ "text": "This snippet has been automatically generated with vim plugin mu-template." }]
VimL: let s:doc += [{ "text": "\n" }]
VimL: let s:doc += [{ "text": "<+doc+>" }]
VimL: let s:doc += [{ "text": "\n" }]
VimL: let s:doc += [{ "tag": "invariant"}]
VimL: let s:doc += [{ "text": "\n" }]
VimL: let s:doc += [{ "tag": "version", "text": "$"."revision$"}]
VimL: let s:doc += [{ "tag": "author"}]
VimL: let s:doc += [{ "text": "<b>Licence</b>"}]
VimL: let s:doc += [{ "text": "BSD 3 clauses (http://opensource.org/licenses/BSD-3-Clause)"}]
VimL: let s:doc += [{ "text": "Copyright (c) 2014, Luc Hermitte (snippet author)" }]
VimL: let s:doc += [{ "license": "BSD-3"}]
VimL: call s:Include("formatted-comment", "cpp/internals", s:doc, {'style': 0})
struct <+s:enum_name+>{
    enum <+s:type+>{ <+join(s:values, ', ')+>, MAX__, UNDEFINED__, FIRST__=0 };

MuT:  if lh#cpp#use_cpp11()
    explicit <+s:enum_name+>(std::uint8_t <+s:value_+>)
MuT:  else
    explicit <+s:enum_name+>(uint8_t <+s:value_+>)
MuT:  endif
        : <+s:m_value+>(<+s:type+>(<+s:value_+>))
        {
            if (<+s:value_+> >= MAX__){
VimL: call s:Include('throw', 'cpp', '"Invalid '.s:enum_name.' value"')
            }
        }
    <+s:enum_name+>(<+s:type+> <+s:value_+>)
        : <+s:m_value+>(<+s:type+>(<+s:value_+>)){
            assert(<+s:m_value+> < MAX__);
        }
    <+s:enum_name+>()
        : <+s:m_value+>(UNDEFINED__){}
    <+s:enum_name+>(std::string const& <+lh#naming#param("s")+>);
MuT:  if s:iterable
    <+s:enum_name+>& operator++(){
        assert(<+s:m_value+> < MAX__);
        <+s:m_value+> = <+s:enum_name+>::<+s:type+>(<+s:m_value+>+1);
        return *this;
    }
    <+s:enum_name+> operator++(int){
        <+s:enum_name+> <+s:tmp+> = *this;
        ++*this;
        return <+s:tmp+>;
    }
MuT:  endif

    char const* <+s:to_string+>() const;
MuT:  if lh#cpp#use_cpp11()
    explicit operator int() const{ return <+s:m_value+>; }
MuT:  endif
    <+s:type+> <+s:to_internal+>() const{ return <+s:m_value+>; }
MuT:  if s:iterable
    friend bool operator<=(<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> <= <+s:rhs_+>.<+s:m_value+>; }
    friend bool operator>=(<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> >= <+s:rhs_+>.<+s:m_value+>; }
    friend bool operator< (<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> <  <+s:rhs_+>.<+s:m_value+>; }
    friend bool operator> (<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> >  <+s:rhs_+>.<+s:m_value+>; }
MuT:  endif
    friend bool operator==(<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> == <+s:rhs_+>.<+s:m_value+>; }
    friend bool operator!=(<+s:enum_name+> <+s:lhs_+>, <+s:enum_name+> <+s:rhs_+>){ return <+s:lhs_+>.<+s:m_value+> != <+s:rhs_+>.<+s:m_value+>; }

    static <+s:enum_name+> <+s:max+>  (){ return <+s:enum_name+>(build_max()); }
MuT:  if s:iterable
    static <+s:enum_name+> begin(){ return FIRST__; }
    static <+s:enum_name+> end  (){ return <+s:enum_name+>(build_max()); }

MuT:      if lh#cpp#use_cpp11()
          /** Helper class to provide for-range loops on <+s:enum_name+>.
           * @see \c range()
           */
          struct <+s:RangeType+>;
          /** Helper function to provide for-range loops on \c <+s:enum_name+>.
           * e.g.
           * @code
           * for (auto value : <+s:enum_name+>::<+s:range+>())
           *    cout << value.<+s:to_internal+>() << " -> " << value.<+s:to_string+>();
           * @endcode
           */
          static <+s:RangeType+> <+s:range+>();
MuT:      endif
MuT:  endif
private:
    struct build_max{};
    <+s:enum_name+>(build_max) : m_value(MAX__){}

    <+s:type+> <+s:m_value+>;
};
MuT:  if s:iterable && lh#cpp#use_cpp11()

          struct <+s:enum_name+>::<+s:RangeType+>{
              struct iterator{
                iterator(<+s:enum_name+> <+s:value_+>) : <+s:m_value+>(<+s:value_+>){}
                <+s:enum_name+> operator*() const{ return <+s:m_value+>; }
                friend bool operator!=(iterator <+s:lhs_+>, iterator <+s:rhs_+>)
                { return <+s:lhs_+>.<+s:m_value+> != <+s:rhs_+>.<+s:m_value+>;}
                iterator& operator++(){ ++<+s:m_value+>; return *this;}
            private:
                <+s:enum_name+> <+s:m_value+>;
              };
              static iterator begin(){ return <+s:enum_name+>::begin(); }
              static iterator end  (){ return <+s:enum_name+>::end(); }
          };
MuT:  endif
VimL: let b:cpp_last_enum = {'name': s:enum_name, 'type': s:type, 'values': s:values, 'RangeType': s:RangeType, 'range': s:range, 'iterable': s:iterable}
VimL: silent! unlet s:values
