VimL:" C++ binary operator snippet, Luc Hermitte, 30th Sep 2013
VimL:" hint: operatorX(T lhs, T const& rhs) { return lhs X= rhs; }
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:reindent     = 1
VimL:"
VimL: "1- snippet parameters
VimL: "1.1- classname
VimL: "1.1.1- in case the class name is already known, no need to extract it
MuT:  let s:clsname = s:Param("clsname",join(s:CmdLineParams(), ''))
MuT:  if empty(s:clsname)
VimL: "1.1.2- otherwise: we try to extract it
MuT:    let s:clsname = lh#cpp#AnalysisLib_Class#CurrentScope(line("."), "class")
MuT:    if empty(s:clsname)
VimL: "1.1.3- otherwise, we try to get the name of the last class found
MuT:      let s:clsname = lh#cpp#AnalysisLib_Class#search_closest_class(line('.'))
VimL: "1.1.4- otherwise, we ask it to the end-user, default = filename minus extensions
MuT:      if empty(s:clsname)
MuT:        let s:clsname = lh#ui#input("class name ?", lh#marker#txt(lh#naming#type(expand("%:t:r"))))
MuT:      endif
MuT:      let s:_friend = ''
MuT:    else
MuT:      let s:_friend = 'friend '
MuT:    endif
MuT:  else
MuT:    let s:_friend = lh#marker#txt('friend ')
MuT:  endif
VimL: "1.2- the operator
MuT:  let s:_op      = s:Param('operator', lh#marker#txt('X'))
VimL: "1.3- operator parameters
MuT:  let s:_lhs     = lh#naming#param('lhs')
MuT:  let s:_rhs     = lh#naming#param('rhs')
VimL: "
VimL:" 2- the code
<+s:_friend+><+s:clsname+> operator<+s:_op+>(<+s:clsname+> <+s:_lhs+>, <+s:clsname+> const& <+s:_rhs+>){ return <+s:_lhs+> <+s:_op+>= <+s:_rhs+>; }
