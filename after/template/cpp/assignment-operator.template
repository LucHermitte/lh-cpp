VimL:" assignment-operator File Template, Luc Hermitte, 21st Aug 2011
VimL:" hint: T& operator=(T const&);
VimL: "TODO: support noexcept
VimL: let s:marker_open  = "<+"
VimL: let s:marker_close = "+>"
VimL: let s:reindent     = 1
VimL: call s:Include('get-class-name', 'cpp/internals')
VimL: let s:how = get(s:Param("assignment-operator", {}), "how", "")
MuT:  if s:how =~ "deleted\\|defaulted"
<+s:clsname+>& operator=(<+s:clsname+> const&) <+lh#cpp#snippets#{s:how}()+>;
MuT:  else
MuT:    let s:use_copyandswap0 =  s:Param('use_copy_and_swap', lh#option#get('cpp_use_copy_and_swap'))
VimL:   let s:use_copyandswap =  lh#option#is_set(s:use_copyandswap0) ? s:use_copyandswap0 : lh#ui#confirm("Use copy-and-swap idiom?", "Yes\nNo", 1)
MuT:    if 1 == s:use_copyandswap
VimL:     call s:Include("copy-and-swap","cpp", s:clsname)
MuT:    else
VimL:     let s:rhs = lh#naming#param("rhs")
VimL:     let s:fn_comments = { }
VimL:     let s:fn_comments.brief = "Assignment operator"
VimL:     let s:fn_comments.param = [{"dir": "in", "name": (s:rhs), "text": "source data to be copied." } ]
VimL:     let s:fn_comments.throw = {"optional": 1}
VimL:     call s:Include("function-comment", "cpp/internals",s:fn_comments)
MuT:      let s:attributes = s:Param("attributes", lh#option#unset())
MuT:      if lh#option#is_set(s:attributes) && !empty(s:attributes)
MuT:        let s:definition = '{'.join(map(copy(s:attributes), 'lh#naming#member(v:val.name)." = ".lh#cpp#snippets#duplicate_param(s:rhs.".".lh#naming#member(v:val.name), v:val.type).";"'), "\n").'}'
MuT:      else
MuT:        let s:definition = ';'
MuT:      endif
<+s:clsname+>& operator=(<+s:clsname+> const& <+s:rhs+>)<+s:definition+>
MuT:    endif
MuT: endif
